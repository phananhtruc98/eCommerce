//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShoesStore.DataAccessLogicLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ShoesStoreDBContext : DbContext
    {
        public ShoesStoreDBContext()
            : base("name=ShoesStoreDBContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Adv> Adv { get; set; }
        public DbSet<Cart> Cart { get; set; }
        public DbSet<CartDet> CartDet { get; set; }
        public DbSet<Chat> Chat { get; set; }
        public DbSet<ChatBox> ChatBox { get; set; }
        public DbSet<Config> Config { get; set; }
        public DbSet<Coupon> Coupon { get; set; }
        public DbSet<Cus> Cus { get; set; }
        public DbSet<Mer> Mer { get; set; }
        public DbSet<Mstr> Mstr { get; set; }
        public DbSet<MstrDet> MstrDet { get; set; }
        public DbSet<MstrRole> MstrRole { get; set; }
        public DbSet<Pro> Pro { get; set; }
        public DbSet<ProBrand> ProBrand { get; set; }
        public DbSet<ProCat> ProCat { get; set; }
        public DbSet<ProColor> ProColor { get; set; }
        public DbSet<ProDet> ProDet { get; set; }
        public DbSet<ProSize> ProSize { get; set; }
        public DbSet<ProSlide> ProSlide { get; set; }
        public DbSet<ProSlideImg> ProSlideImg { get; set; }
        public DbSet<Rcpt> Rcpt { get; set; }
        public DbSet<RcptBuy> RcptBuy { get; set; }
        public DbSet<RcptBuyDet> RcptBuyDet { get; set; }
        public DbSet<RcptBuySta> RcptBuySta { get; set; }
        public DbSet<RcptBuyStaDet> RcptBuyStaDet { get; set; }
        public DbSet<RcptBuyStaStep> RcptBuyStaStep { get; set; }
        public DbSet<RcptSub> RcptSub { get; set; }
        public DbSet<RcptSubDet> RcptSubDet { get; set; }
        public DbSet<Shp> Shp { get; set; }
        public DbSet<Sub> Sub { get; set; }
        public DbSet<Usr> Usr { get; set; }
        public DbSet<UsrAct> UsrAct { get; set; }
        public DbSet<WebInfo> WebInfo { get; set; }
        public DbSet<WebSlide> WebSlide { get; set; }
    
        public virtual ObjectResult<sp_Admin_Info_Result> sp_Admin_Info()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Admin_Info_Result>("sp_Admin_Info");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_Cart_Delete(Nullable<int> cartID)
        {
            var cartIDParameter = cartID.HasValue ?
                new ObjectParameter("CartID", cartID) :
                new ObjectParameter("CartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cart_Delete", cartIDParameter);
        }
    
        public virtual int sp_Cart_Insert(Nullable<int> cusID, string ipAddress)
        {
            var cusIDParameter = cusID.HasValue ?
                new ObjectParameter("CusID", cusID) :
                new ObjectParameter("CusID", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cart_Insert", cusIDParameter, ipAddressParameter);
        }
    
        public virtual ObjectResult<sp_Cart_Select_Result> sp_Cart_Select(Nullable<int> cartID)
        {
            var cartIDParameter = cartID.HasValue ?
                new ObjectParameter("CartID", cartID) :
                new ObjectParameter("CartID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cart_Select_Result>("sp_Cart_Select", cartIDParameter);
        }
    
        public virtual int sp_Cart_Update(Nullable<int> cartID, Nullable<int> cusID, string ipAddress)
        {
            var cartIDParameter = cartID.HasValue ?
                new ObjectParameter("CartID", cartID) :
                new ObjectParameter("CartID", typeof(int));
    
            var cusIDParameter = cusID.HasValue ?
                new ObjectParameter("CusID", cusID) :
                new ObjectParameter("CusID", typeof(int));
    
            var ipAddressParameter = ipAddress != null ?
                new ObjectParameter("IpAddress", ipAddress) :
                new ObjectParameter("IpAddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cart_Update", cartIDParameter, cusIDParameter, ipAddressParameter);
        }
    
        public virtual int sp_CartDet_Delete(Nullable<int> cartId, Nullable<int> shpId, Nullable<int> proId)
        {
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CartDet_Delete", cartIdParameter, shpIdParameter, proIdParameter);
        }
    
        public virtual int sp_CartDet_Insert(Nullable<int> cartId, Nullable<int> shpId, Nullable<int> proId, Nullable<int> qty)
        {
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CartDet_Insert", cartIdParameter, shpIdParameter, proIdParameter, qtyParameter);
        }
    
        public virtual ObjectResult<sp_CartDet_Select_Result> sp_CartDet_Select(Nullable<int> cartId, Nullable<int> shpId, Nullable<int> proId)
        {
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CartDet_Select_Result>("sp_CartDet_Select", cartIdParameter, shpIdParameter, proIdParameter);
        }
    
        public virtual int sp_CartDet_Update(Nullable<int> cartId, Nullable<int> shpId, Nullable<int> proId, Nullable<int> qty)
        {
            var cartIdParameter = cartId.HasValue ?
                new ObjectParameter("CartId", cartId) :
                new ObjectParameter("CartId", typeof(int));
    
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("Qty", qty) :
                new ObjectParameter("Qty", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CartDet_Update", cartIdParameter, shpIdParameter, proIdParameter, qtyParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_Cus_Delete(Nullable<int> cusId)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cus_Delete", cusIdParameter);
        }
    
        public virtual ObjectResult<sp_Cus_Info_Result> sp_Cus_Info()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Cus_Info_Result>("sp_Cus_Info");
        }
    
        public virtual int sp_Cus_Insert(Nullable<int> cusId)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cus_Insert", cusIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Cus_Select(Nullable<int> cusID)
        {
            var cusIDParameter = cusID.HasValue ?
                new ObjectParameter("CusID", cusID) :
                new ObjectParameter("CusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Cus_Select", cusIDParameter);
        }
    
        public virtual int sp_Cus_Update(Nullable<int> cusId)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Cus_Update", cusIdParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_Mer_Delete(Nullable<int> merId)
        {
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mer_Delete", merIdParameter);
        }
    
        public virtual ObjectResult<sp_Mer_Info_Result> sp_Mer_Info()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Mer_Info_Result>("sp_Mer_Info");
        }
    
        public virtual int sp_Mer_Insert(Nullable<int> merId)
        {
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mer_Insert", merIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Mer_Select(Nullable<int> merId)
        {
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Mer_Select", merIdParameter);
        }
    
        public virtual int sp_Mer_Update(Nullable<int> merId)
        {
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mer_Update", merIdParameter);
        }
    
        public virtual int sp_Mstr_Delete(Nullable<int> mstrId, Nullable<int> roleId)
        {
            var mstrIdParameter = mstrId.HasValue ?
                new ObjectParameter("MstrId", mstrId) :
                new ObjectParameter("MstrId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mstr_Delete", mstrIdParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Mstr_Select(Nullable<int> mstrId, Nullable<int> roleId)
        {
            var mstrIdParameter = mstrId.HasValue ?
                new ObjectParameter("MstrId", mstrId) :
                new ObjectParameter("MstrId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Mstr_Select", mstrIdParameter, roleIdParameter);
        }
    
        public virtual int sp_MstrRole_Delete(Nullable<int> roleId, string roleName)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MstrRole_Delete", roleIdParameter, roleNameParameter);
        }
    
        public virtual int sp_MstrRole_Insert(Nullable<int> roleId, string roleName)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MstrRole_Insert", roleIdParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<sp_MstrRole_Select_Result> sp_MstrRole_Select(Nullable<int> roleId, string roleName)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_MstrRole_Select_Result>("sp_MstrRole_Select", roleIdParameter, roleNameParameter);
        }
    
        public virtual int sp_ProBrand_Delete(Nullable<int> brandId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProBrand_Delete", brandIdParameter);
        }
    
        public virtual int sp_ProBrand_Insert(Nullable<int> brandId, string brandName)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProBrand_Insert", brandIdParameter, brandNameParameter);
        }
    
        public virtual ObjectResult<sp_ProBrand_Select_Result> sp_ProBrand_Select(Nullable<int> brandId)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProBrand_Select_Result>("sp_ProBrand_Select", brandIdParameter);
        }
    
        public virtual int sp_ProBrand_Update(Nullable<int> brandId, string brandName)
        {
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProBrand_Update", brandIdParameter, brandNameParameter);
        }
    
        public virtual int sp_ProCat_Delete(Nullable<int> catId)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProCat_Delete", catIdParameter);
        }
    
        public virtual int sp_ProCat_Insert(Nullable<int> catId, string catName, Nullable<bool> active, Nullable<System.DateTime> dateAdd, Nullable<System.DateTime> dateEdit)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var catNameParameter = catName != null ?
                new ObjectParameter("CatName", catName) :
                new ObjectParameter("CatName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var dateAddParameter = dateAdd.HasValue ?
                new ObjectParameter("DateAdd", dateAdd) :
                new ObjectParameter("DateAdd", typeof(System.DateTime));
    
            var dateEditParameter = dateEdit.HasValue ?
                new ObjectParameter("DateEdit", dateEdit) :
                new ObjectParameter("DateEdit", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProCat_Insert", catIdParameter, catNameParameter, activeParameter, dateAddParameter, dateEditParameter);
        }
    
        public virtual ObjectResult<sp_ProCat_Select_Result> sp_ProCat_Select(Nullable<int> catId)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProCat_Select_Result>("sp_ProCat_Select", catIdParameter);
        }
    
        public virtual int sp_ProCat_Update(Nullable<int> catId, string catName, Nullable<bool> active, Nullable<System.DateTime> dateAdd, Nullable<System.DateTime> dateEdit)
        {
            var catIdParameter = catId.HasValue ?
                new ObjectParameter("CatId", catId) :
                new ObjectParameter("CatId", typeof(int));
    
            var catNameParameter = catName != null ?
                new ObjectParameter("CatName", catName) :
                new ObjectParameter("CatName", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var dateAddParameter = dateAdd.HasValue ?
                new ObjectParameter("DateAdd", dateAdd) :
                new ObjectParameter("DateAdd", typeof(System.DateTime));
    
            var dateEditParameter = dateEdit.HasValue ?
                new ObjectParameter("DateEdit", dateEdit) :
                new ObjectParameter("DateEdit", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProCat_Update", catIdParameter, catNameParameter, activeParameter, dateAddParameter, dateEditParameter);
        }
    
        public virtual int sp_ProColor_Delete(Nullable<int> colorId)
        {
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProColor_Delete", colorIdParameter);
        }
    
        public virtual int sp_ProColor_Insert(Nullable<int> colorId, string colorName, string colorImg)
        {
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var colorNameParameter = colorName != null ?
                new ObjectParameter("ColorName", colorName) :
                new ObjectParameter("ColorName", typeof(string));
    
            var colorImgParameter = colorImg != null ?
                new ObjectParameter("ColorImg", colorImg) :
                new ObjectParameter("ColorImg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProColor_Insert", colorIdParameter, colorNameParameter, colorImgParameter);
        }
    
        public virtual ObjectResult<sp_ProColor_Select_Result> sp_ProColor_Select(Nullable<int> colorId)
        {
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProColor_Select_Result>("sp_ProColor_Select", colorIdParameter);
        }
    
        public virtual int sp_ProDet_Delete(Nullable<int> shpId, Nullable<int> proId, Nullable<int> colorId, Nullable<int> sizeId)
        {
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProDet_Delete", shpIdParameter, proIdParameter, colorIdParameter, sizeIdParameter);
        }
    
        public virtual int sp_ProDet_Insert(Nullable<int> shpId, Nullable<int> proId, Nullable<int> colorId, Nullable<int> sizeId)
        {
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProDet_Insert", shpIdParameter, proIdParameter, colorIdParameter, sizeIdParameter);
        }
    
        public virtual ObjectResult<sp_ProDet_Select_Result> sp_ProDet_Select(Nullable<int> shpId, Nullable<int> proId, Nullable<int> colorId, Nullable<int> sizeId)
        {
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProDet_Select_Result>("sp_ProDet_Select", shpIdParameter, proIdParameter, colorIdParameter, sizeIdParameter);
        }
    
        public virtual int sp_ProDet_Update(Nullable<int> shpId, Nullable<int> proId, Nullable<int> colorId, Nullable<int> sizeId)
        {
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProDet_Update", shpIdParameter, proIdParameter, colorIdParameter, sizeIdParameter);
        }
    
        public virtual int sp_ProSize_Delete(Nullable<int> sizeId)
        {
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProSize_Delete", sizeIdParameter);
        }
    
        public virtual int sp_ProSize_Insert(Nullable<int> sizeId, string sizeName, string sizeImg)
        {
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var sizeImgParameter = sizeImg != null ?
                new ObjectParameter("SizeImg", sizeImg) :
                new ObjectParameter("SizeImg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProSize_Insert", sizeIdParameter, sizeNameParameter, sizeImgParameter);
        }
    
        public virtual ObjectResult<sp_ProSize_Select_Result> sp_ProSize_Select(Nullable<int> sizeId)
        {
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ProSize_Select_Result>("sp_ProSize_Select", sizeIdParameter);
        }
    
        public virtual int sp_Rcpt_Delete(Nullable<int> rcptId)
        {
            var rcptIdParameter = rcptId.HasValue ?
                new ObjectParameter("RcptId", rcptId) :
                new ObjectParameter("RcptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rcpt_Delete", rcptIdParameter);
        }
    
        public virtual int sp_Rcpt_Insert(Nullable<int> rcptId, Nullable<int> usrAdd, Nullable<int> usrEdit, Nullable<System.DateTime> dateAdd, Nullable<System.DateTime> dateEdit)
        {
            var rcptIdParameter = rcptId.HasValue ?
                new ObjectParameter("RcptId", rcptId) :
                new ObjectParameter("RcptId", typeof(int));
    
            var usrAddParameter = usrAdd.HasValue ?
                new ObjectParameter("UsrAdd", usrAdd) :
                new ObjectParameter("UsrAdd", typeof(int));
    
            var usrEditParameter = usrEdit.HasValue ?
                new ObjectParameter("UsrEdit", usrEdit) :
                new ObjectParameter("UsrEdit", typeof(int));
    
            var dateAddParameter = dateAdd.HasValue ?
                new ObjectParameter("DateAdd", dateAdd) :
                new ObjectParameter("DateAdd", typeof(System.DateTime));
    
            var dateEditParameter = dateEdit.HasValue ?
                new ObjectParameter("DateEdit", dateEdit) :
                new ObjectParameter("DateEdit", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rcpt_Insert", rcptIdParameter, usrAddParameter, usrEditParameter, dateAddParameter, dateEditParameter);
        }
    
        public virtual ObjectResult<sp_Rcpt_Select_Result> sp_Rcpt_Select(Nullable<int> rcptId)
        {
            var rcptIdParameter = rcptId.HasValue ?
                new ObjectParameter("RcptId", rcptId) :
                new ObjectParameter("RcptId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Rcpt_Select_Result>("sp_Rcpt_Select", rcptIdParameter);
        }
    
        public virtual int sp_Rcpt_Update(Nullable<int> rcptId, Nullable<int> usrAdd, Nullable<int> usrEdit, Nullable<System.DateTime> dateAdd, Nullable<System.DateTime> dateEdit)
        {
            var rcptIdParameter = rcptId.HasValue ?
                new ObjectParameter("RcptId", rcptId) :
                new ObjectParameter("RcptId", typeof(int));
    
            var usrAddParameter = usrAdd.HasValue ?
                new ObjectParameter("UsrAdd", usrAdd) :
                new ObjectParameter("UsrAdd", typeof(int));
    
            var usrEditParameter = usrEdit.HasValue ?
                new ObjectParameter("UsrEdit", usrEdit) :
                new ObjectParameter("UsrEdit", typeof(int));
    
            var dateAddParameter = dateAdd.HasValue ?
                new ObjectParameter("DateAdd", dateAdd) :
                new ObjectParameter("DateAdd", typeof(System.DateTime));
    
            var dateEditParameter = dateEdit.HasValue ?
                new ObjectParameter("DateEdit", dateEdit) :
                new ObjectParameter("DateEdit", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rcpt_Update", rcptIdParameter, usrAddParameter, usrEditParameter, dateAddParameter, dateEditParameter);
        }
    
        public virtual int sp_RcptBuy_Delete(Nullable<int> rcptBuyId)
        {
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuy_Delete", rcptBuyIdParameter);
        }
    
        public virtual int sp_RcptBuy_Insert(Nullable<int> rcptBuyId, Nullable<int> cusId)
        {
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuy_Insert", rcptBuyIdParameter, cusIdParameter);
        }
    
        public virtual ObjectResult<sp_RcptBuy_Select_Result> sp_RcptBuy_Select(Nullable<int> rcptBuyId)
        {
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RcptBuy_Select_Result>("sp_RcptBuy_Select", rcptBuyIdParameter);
        }
    
        public virtual int sp_RcptBuy_Update(Nullable<int> rcptBuyId, Nullable<int> cusId)
        {
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuy_Update", rcptBuyIdParameter, cusIdParameter);
        }
    
        public virtual int sp_RcptBuyDet_Delete(Nullable<int> rcptBuyId, Nullable<int> shpId, Nullable<int> proId)
        {
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyDet_Delete", rcptBuyIdParameter, shpIdParameter, proIdParameter);
        }
    
        public virtual int sp_RcptBuyDet_Insert(Nullable<int> rcptBuyId, Nullable<int> shpId, Nullable<int> proId)
        {
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyDet_Insert", rcptBuyIdParameter, shpIdParameter, proIdParameter);
        }
    
        public virtual ObjectResult<sp_RcptBuyDet_Select_Result> sp_RcptBuyDet_Select(Nullable<int> rcptBuyId, Nullable<int> shpId, Nullable<int> proId)
        {
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RcptBuyDet_Select_Result>("sp_RcptBuyDet_Select", rcptBuyIdParameter, shpIdParameter, proIdParameter);
        }
    
        public virtual int sp_RcptBuyDet_Update(Nullable<int> rcptBuyId, Nullable<int> shpId, Nullable<int> proId)
        {
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var proIdParameter = proId.HasValue ?
                new ObjectParameter("ProId", proId) :
                new ObjectParameter("ProId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyDet_Update", rcptBuyIdParameter, shpIdParameter, proIdParameter);
        }
    
        public virtual int sp_RcptBuySta_Delete(Nullable<int> staId, Nullable<int> rcptBuyId)
        {
            var staIdParameter = staId.HasValue ?
                new ObjectParameter("StaId", staId) :
                new ObjectParameter("StaId", typeof(int));
    
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuySta_Delete", staIdParameter, rcptBuyIdParameter);
        }
    
        public virtual int sp_RcptBuySta_Insert(Nullable<int> staId, Nullable<int> rcptBuyId)
        {
            var staIdParameter = staId.HasValue ?
                new ObjectParameter("StaId", staId) :
                new ObjectParameter("StaId", typeof(int));
    
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuySta_Insert", staIdParameter, rcptBuyIdParameter);
        }
    
        public virtual ObjectResult<sp_RcptBuySta_Select_Result> sp_RcptBuySta_Select(Nullable<int> staId, Nullable<int> rcptBuyId)
        {
            var staIdParameter = staId.HasValue ?
                new ObjectParameter("StaId", staId) :
                new ObjectParameter("StaId", typeof(int));
    
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RcptBuySta_Select_Result>("sp_RcptBuySta_Select", staIdParameter, rcptBuyIdParameter);
        }
    
        public virtual int sp_RcptBuySta_Update(Nullable<int> staId, Nullable<int> rcptBuyId)
        {
            var staIdParameter = staId.HasValue ?
                new ObjectParameter("StaId", staId) :
                new ObjectParameter("StaId", typeof(int));
    
            var rcptBuyIdParameter = rcptBuyId.HasValue ?
                new ObjectParameter("RcptBuyId", rcptBuyId) :
                new ObjectParameter("RcptBuyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuySta_Update", staIdParameter, rcptBuyIdParameter);
        }
    
        public virtual int sp_RcptBuyStaDet_Delete(Nullable<int> staId, Nullable<int> stepId)
        {
            var staIdParameter = staId.HasValue ?
                new ObjectParameter("StaId", staId) :
                new ObjectParameter("StaId", typeof(int));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyStaDet_Delete", staIdParameter, stepIdParameter);
        }
    
        public virtual ObjectResult<sp_RcptBuyStaDet_Select_Result> sp_RcptBuyStaDet_Select(Nullable<int> staId, Nullable<int> stepId)
        {
            var staIdParameter = staId.HasValue ?
                new ObjectParameter("StaId", staId) :
                new ObjectParameter("StaId", typeof(int));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RcptBuyStaDet_Select_Result>("sp_RcptBuyStaDet_Select", staIdParameter, stepIdParameter);
        }
    
        public virtual int sp_RcptBuyStaStep_Delete(Nullable<int> stepId)
        {
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyStaStep_Delete", stepIdParameter);
        }
    
        public virtual int sp_RcptBuyStaStep_Insert(Nullable<int> stepId, string stepCont, Nullable<int> stepOrder)
        {
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            var stepContParameter = stepCont != null ?
                new ObjectParameter("StepCont", stepCont) :
                new ObjectParameter("StepCont", typeof(string));
    
            var stepOrderParameter = stepOrder.HasValue ?
                new ObjectParameter("StepOrder", stepOrder) :
                new ObjectParameter("StepOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyStaStep_Insert", stepIdParameter, stepContParameter, stepOrderParameter);
        }
    
        public virtual ObjectResult<sp_RcptBuyStaStep_Select_Result> sp_RcptBuyStaStep_Select(Nullable<int> stepId)
        {
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RcptBuyStaStep_Select_Result>("sp_RcptBuyStaStep_Select", stepIdParameter);
        }
    
        public virtual int sp_RcptBuyStaStep_Update(Nullable<int> stepId, string stepCont, Nullable<int> stepOrder)
        {
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            var stepContParameter = stepCont != null ?
                new ObjectParameter("StepCont", stepCont) :
                new ObjectParameter("StepCont", typeof(string));
    
            var stepOrderParameter = stepOrder.HasValue ?
                new ObjectParameter("StepOrder", stepOrder) :
                new ObjectParameter("StepOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyStaStep_Update", stepIdParameter, stepContParameter, stepOrderParameter);
        }
    
        public virtual int sp_RcptSub_Delete(Nullable<int> rcptSubId)
        {
            var rcptSubIdParameter = rcptSubId.HasValue ?
                new ObjectParameter("RcptSubId", rcptSubId) :
                new ObjectParameter("RcptSubId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptSub_Delete", rcptSubIdParameter);
        }
    
        public virtual int sp_RcptSub_Insert(Nullable<int> rcptSubId)
        {
            var rcptSubIdParameter = rcptSubId.HasValue ?
                new ObjectParameter("RcptSubId", rcptSubId) :
                new ObjectParameter("RcptSubId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptSub_Insert", rcptSubIdParameter);
        }
    
        public virtual ObjectResult<sp_RcptSub_Select_Result> sp_RcptSub_Select(Nullable<int> rcptSubId)
        {
            var rcptSubIdParameter = rcptSubId.HasValue ?
                new ObjectParameter("RcptSubId", rcptSubId) :
                new ObjectParameter("RcptSubId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_RcptSub_Select_Result>("sp_RcptSub_Select", rcptSubIdParameter);
        }
    
        public virtual int sp_RcptSub_Update(Nullable<int> rcptSubId)
        {
            var rcptSubIdParameter = rcptSubId.HasValue ?
                new ObjectParameter("RcptSubId", rcptSubId) :
                new ObjectParameter("RcptSubId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptSub_Update", rcptSubIdParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_Shp_Delete(Nullable<int> shpId)
        {
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Shp_Delete", shpIdParameter);
        }
    
        public virtual int sp_Shp_Insert(Nullable<int> shpId, Nullable<int> merId, string shpName, Nullable<System.DateTime> dateStart, Nullable<bool> active)
        {
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            var shpNameParameter = shpName != null ?
                new ObjectParameter("ShpName", shpName) :
                new ObjectParameter("ShpName", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Shp_Insert", shpIdParameter, merIdParameter, shpNameParameter, dateStartParameter, activeParameter);
        }
    
        public virtual ObjectResult<sp_Shp_Select_Result> sp_Shp_Select(Nullable<int> shpId)
        {
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Shp_Select_Result>("sp_Shp_Select", shpIdParameter);
        }
    
        public virtual int sp_Shp_Update(Nullable<int> shpId, Nullable<int> merId, string shpName, Nullable<System.DateTime> dateStart, Nullable<bool> active)
        {
            var shpIdParameter = shpId.HasValue ?
                new ObjectParameter("ShpId", shpId) :
                new ObjectParameter("ShpId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            var shpNameParameter = shpName != null ?
                new ObjectParameter("ShpName", shpName) :
                new ObjectParameter("ShpName", typeof(string));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Shp_Update", shpIdParameter, merIdParameter, shpNameParameter, dateStartParameter, activeParameter);
        }
    
        public virtual int sp_Sub_Delete(Nullable<int> subId)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sub_Delete", subIdParameter);
        }
    
        public virtual int sp_Sub_Insert(Nullable<int> subId, string subContent, Nullable<int> durDay, string price)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var subContentParameter = subContent != null ?
                new ObjectParameter("SubContent", subContent) :
                new ObjectParameter("SubContent", typeof(string));
    
            var durDayParameter = durDay.HasValue ?
                new ObjectParameter("DurDay", durDay) :
                new ObjectParameter("DurDay", typeof(int));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sub_Insert", subIdParameter, subContentParameter, durDayParameter, priceParameter);
        }
    
        public virtual ObjectResult<sp_Sub_Select_Result> sp_Sub_Select(Nullable<int> subId)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Sub_Select_Result>("sp_Sub_Select", subIdParameter);
        }
    
        public virtual int sp_Sub_Update(Nullable<int> subId, string subContent, Nullable<int> durDay, string price)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var subContentParameter = subContent != null ?
                new ObjectParameter("SubContent", subContent) :
                new ObjectParameter("SubContent", typeof(string));
    
            var durDayParameter = durDay.HasValue ?
                new ObjectParameter("DurDay", durDay) :
                new ObjectParameter("DurDay", typeof(int));
    
            var priceParameter = price != null ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Sub_Update", subIdParameter, subContentParameter, durDayParameter, priceParameter);
        }
    
        public virtual int sp_SubDet_Delete(Nullable<int> subId, Nullable<int> merId)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubDet_Delete", subIdParameter, merIdParameter);
        }
    
        public virtual int sp_SubDet_Insert(Nullable<int> subId, Nullable<int> merId, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubDet_Insert", subIdParameter, merIdParameter, dateStartParameter, dateEndParameter);
        }
    
        public virtual int sp_SubDet_Select(Nullable<int> subId, Nullable<int> merId)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubDet_Select", subIdParameter, merIdParameter);
        }
    
        public virtual int sp_SubDet_Update(Nullable<int> subId, Nullable<int> merId, Nullable<System.DateTime> dateStart, Nullable<System.DateTime> dateEnd)
        {
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            var dateStartParameter = dateStart.HasValue ?
                new ObjectParameter("DateStart", dateStart) :
                new ObjectParameter("DateStart", typeof(System.DateTime));
    
            var dateEndParameter = dateEnd.HasValue ?
                new ObjectParameter("DateEnd", dateEnd) :
                new ObjectParameter("DateEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SubDet_Update", subIdParameter, merIdParameter, dateStartParameter, dateEndParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int sp_Usr_Delete(Nullable<int> usrId)
        {
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Usr_Delete", usrIdParameter);
        }
    
        public virtual ObjectResult<sp_Usr_Select_Result> sp_Usr_Select(Nullable<int> usrId)
        {
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Usr_Select_Result>("sp_Usr_Select", usrIdParameter);
        }
    
        public virtual int WebInfo_Delete(Nullable<int> webId)
        {
            var webIdParameter = webId.HasValue ?
                new ObjectParameter("WebId", webId) :
                new ObjectParameter("WebId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WebInfo_Delete", webIdParameter);
        }
    
        public virtual ObjectResult<WebInfo_Insert_Result> WebInfo_Insert(Nullable<int> webId, string name, string address, string email, string phone, string workTime)
        {
            var webIdParameter = webId.HasValue ?
                new ObjectParameter("WebId", webId) :
                new ObjectParameter("WebId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var workTimeParameter = workTime != null ?
                new ObjectParameter("WorkTime", workTime) :
                new ObjectParameter("WorkTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WebInfo_Insert_Result>("WebInfo_Insert", webIdParameter, nameParameter, addressParameter, emailParameter, phoneParameter, workTimeParameter);
        }
    
        public virtual ObjectResult<WebInfo_Select_Result> WebInfo_Select(Nullable<int> webId)
        {
            var webIdParameter = webId.HasValue ?
                new ObjectParameter("WebId", webId) :
                new ObjectParameter("WebId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WebInfo_Select_Result>("WebInfo_Select", webIdParameter);
        }
    
        public virtual ObjectResult<WebInfo_Update_Result> WebInfo_Update(Nullable<int> webId, string name, string address, string email, string phone, string workTime)
        {
            var webIdParameter = webId.HasValue ?
                new ObjectParameter("WebId", webId) :
                new ObjectParameter("WebId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var workTimeParameter = workTime != null ?
                new ObjectParameter("WorkTime", workTime) :
                new ObjectParameter("WorkTime", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WebInfo_Update_Result>("WebInfo_Update", webIdParameter, nameParameter, addressParameter, emailParameter, phoneParameter, workTimeParameter);
        }
    
        public virtual int WebSlide_Delete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WebSlide_Delete", idParameter);
        }
    
        public virtual ObjectResult<WebSlide_Insert_Result> WebSlide_Insert(Nullable<int> id, Nullable<int> webId, string img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var webIdParameter = webId.HasValue ?
                new ObjectParameter("WebId", webId) :
                new ObjectParameter("WebId", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("Img", img) :
                new ObjectParameter("Img", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WebSlide_Insert_Result>("WebSlide_Insert", idParameter, webIdParameter, imgParameter);
        }
    
        public virtual ObjectResult<WebSlide_Select_Result> WebSlide_Select(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WebSlide_Select_Result>("WebSlide_Select", idParameter);
        }
    
        public virtual ObjectResult<WebSlide_Update_Result> WebSlide_Update(Nullable<int> id, Nullable<int> webId, string img)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var webIdParameter = webId.HasValue ?
                new ObjectParameter("WebId", webId) :
                new ObjectParameter("WebId", typeof(int));
    
            var imgParameter = img != null ?
                new ObjectParameter("Img", img) :
                new ObjectParameter("Img", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WebSlide_Update_Result>("WebSlide_Update", idParameter, webIdParameter, imgParameter);
        }
    
        public virtual int sp_Mstr_Insert(Nullable<int> mstrId, Nullable<int> roleId)
        {
            var mstrIdParameter = mstrId.HasValue ?
                new ObjectParameter("MstrId", mstrId) :
                new ObjectParameter("MstrId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mstr_Insert", mstrIdParameter, roleIdParameter);
        }
    
        public virtual int sp_Mstr_Update(Nullable<int> mstrId, Nullable<int> roleId)
        {
            var mstrIdParameter = mstrId.HasValue ?
                new ObjectParameter("MstrId", mstrId) :
                new ObjectParameter("MstrId", typeof(int));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Mstr_Update", mstrIdParameter, roleIdParameter);
        }
    
        public virtual int sp_MstrRole_Update(Nullable<int> roleId, string roleName)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_MstrRole_Update", roleIdParameter, roleNameParameter);
        }
    
        public virtual int sp_ProColor_Update(Nullable<int> colorId, string colorName, string colorImg)
        {
            var colorIdParameter = colorId.HasValue ?
                new ObjectParameter("ColorId", colorId) :
                new ObjectParameter("ColorId", typeof(int));
    
            var colorNameParameter = colorName != null ?
                new ObjectParameter("ColorName", colorName) :
                new ObjectParameter("ColorName", typeof(string));
    
            var colorImgParameter = colorImg != null ?
                new ObjectParameter("ColorImg", colorImg) :
                new ObjectParameter("ColorImg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProColor_Update", colorIdParameter, colorNameParameter, colorImgParameter);
        }
    
        public virtual int sp_ProSize_Update(Nullable<int> sizeId, string sizeName, string sizeImg)
        {
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            var sizeNameParameter = sizeName != null ?
                new ObjectParameter("SizeName", sizeName) :
                new ObjectParameter("SizeName", typeof(string));
    
            var sizeImgParameter = sizeImg != null ?
                new ObjectParameter("SizeImg", sizeImg) :
                new ObjectParameter("SizeImg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ProSize_Update", sizeIdParameter, sizeNameParameter, sizeImgParameter);
        }
    
        public virtual int sp_Rcpt_Sub_Det()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Rcpt_Sub_Det");
        }
    
        public virtual int sp_RcptBuyStaDet_Insert(Nullable<int> staId, Nullable<int> stepId, Nullable<bool> isDone)
        {
            var staIdParameter = staId.HasValue ?
                new ObjectParameter("StaId", staId) :
                new ObjectParameter("StaId", typeof(int));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            var isDoneParameter = isDone.HasValue ?
                new ObjectParameter("IsDone", isDone) :
                new ObjectParameter("IsDone", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyStaDet_Insert", staIdParameter, stepIdParameter, isDoneParameter);
        }
    
        public virtual int sp_RcptBuyStaDet_Update(Nullable<int> staId, Nullable<int> stepId, Nullable<bool> isDone)
        {
            var staIdParameter = staId.HasValue ?
                new ObjectParameter("StaId", staId) :
                new ObjectParameter("StaId", typeof(int));
    
            var stepIdParameter = stepId.HasValue ?
                new ObjectParameter("StepId", stepId) :
                new ObjectParameter("StepId", typeof(int));
    
            var isDoneParameter = isDone.HasValue ?
                new ObjectParameter("IsDone", isDone) :
                new ObjectParameter("IsDone", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptBuyStaDet_Update", staIdParameter, stepIdParameter, isDoneParameter);
        }
    
        public virtual int sp_RcptSubDet_Delete(Nullable<int> rcptSubId, Nullable<int> subId, Nullable<int> merId)
        {
            var rcptSubIdParameter = rcptSubId.HasValue ?
                new ObjectParameter("RcptSubId", rcptSubId) :
                new ObjectParameter("RcptSubId", typeof(int));
    
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptSubDet_Delete", rcptSubIdParameter, subIdParameter, merIdParameter);
        }
    
        public virtual int sp_RcptSubDet_Insert(Nullable<int> rcptSubId, Nullable<int> subId, Nullable<int> merId)
        {
            var rcptSubIdParameter = rcptSubId.HasValue ?
                new ObjectParameter("RcptSubId", rcptSubId) :
                new ObjectParameter("RcptSubId", typeof(int));
    
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptSubDet_Insert", rcptSubIdParameter, subIdParameter, merIdParameter);
        }
    
        public virtual int sp_RcptSubDet_Select(Nullable<int> rcptSubId, Nullable<int> subId, Nullable<int> merId)
        {
            var rcptSubIdParameter = rcptSubId.HasValue ?
                new ObjectParameter("RcptSubId", rcptSubId) :
                new ObjectParameter("RcptSubId", typeof(int));
    
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptSubDet_Select", rcptSubIdParameter, subIdParameter, merIdParameter);
        }
    
        public virtual int sp_RcptSubDet_Update(Nullable<int> rcptSubId, Nullable<int> subId, Nullable<int> merId)
        {
            var rcptSubIdParameter = rcptSubId.HasValue ?
                new ObjectParameter("RcptSubId", rcptSubId) :
                new ObjectParameter("RcptSubId", typeof(int));
    
            var subIdParameter = subId.HasValue ?
                new ObjectParameter("SubId", subId) :
                new ObjectParameter("SubId", typeof(int));
    
            var merIdParameter = merId.HasValue ?
                new ObjectParameter("MerId", merId) :
                new ObjectParameter("MerId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_RcptSubDet_Update", rcptSubIdParameter, subIdParameter, merIdParameter);
        }
    
        public virtual int sp_Usr_Insert(Nullable<int> usrId, string userName, string login, string password, Nullable<bool> active, string email, string address, string phone, Nullable<System.DateTime> dateAdd, Nullable<System.DateTime> dateEdit)
        {
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var dateAddParameter = dateAdd.HasValue ?
                new ObjectParameter("DateAdd", dateAdd) :
                new ObjectParameter("DateAdd", typeof(System.DateTime));
    
            var dateEditParameter = dateEdit.HasValue ?
                new ObjectParameter("DateEdit", dateEdit) :
                new ObjectParameter("DateEdit", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Usr_Insert", usrIdParameter, userNameParameter, loginParameter, passwordParameter, activeParameter, emailParameter, addressParameter, phoneParameter, dateAddParameter, dateEditParameter);
        }
    
        public virtual int sp_Usr_Update(Nullable<int> usrId, string userName, string login, string password, Nullable<bool> active, string email, string address, string phone, Nullable<System.DateTime> dateAdd, Nullable<System.DateTime> dateEdit)
        {
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("Login", login) :
                new ObjectParameter("Login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var dateAddParameter = dateAdd.HasValue ?
                new ObjectParameter("DateAdd", dateAdd) :
                new ObjectParameter("DateAdd", typeof(System.DateTime));
    
            var dateEditParameter = dateEdit.HasValue ?
                new ObjectParameter("DateEdit", dateEdit) :
                new ObjectParameter("DateEdit", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_Usr_Update", usrIdParameter, userNameParameter, loginParameter, passwordParameter, activeParameter, emailParameter, addressParameter, phoneParameter, dateAddParameter, dateEditParameter);
        }
    }
}
